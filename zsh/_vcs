# Replace $HOME with ~
function +vi-home-path() {
  hook_com[base]="$(echo ${hook_com[base]} | sed "s/${HOME:gs/\//\\\//}/~/" )"
}

# Checks if working tree is dirty
function parse_git_dirty() {
  local STATUS
  local -a FLAGS
  FLAGS=('--porcelain' '--ignore-submodules=dirty' '--untracked-files=no')
  # if [[ "$(command git config --get hide-dirty)" != "1" ]]; then
    # if [[ "$DISABLE_UNTRACKED_FILES_DIRTY" == "true" ]]; then
      # FLAGS+='--untracked-files=no'
    # fi
  # fi
  STATUS=$(command git status ${FLAGS} 2> /dev/null | tail -n1)
  if [[ -n $STATUS ]]; then
    echo " %{%F{red}%}(*)%{%f%}"
  else
    echo ""
  fi
}

# Show remote ref name and number of commits ahead-of or behind
function +vi-git-st() {
  local ahead behind remote
  local -a gitstatus

  # Are we on a remote-tracking branch?
  remote=${$(git rev-parse --verify ${hook_com[branch]}@{upstream} \
      --symbolic-full-name 2>/dev/null)/refs\/remotes\/}

  echo "${remote}"

  if [[ -n ${remote} ]] ; then
      # for git prior to 1.7
      # ahead=$(git rev-list origin/${hook_com[branch]}..HEAD | wc -l)
      ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)
      (( $ahead )) && gitstatus+=( "${c3}+${ahead}${c2}" )

      # for git prior to 1.7
      # behind=$(git rev-list HEAD..origin/${hook_com[branch]} | wc -l)
      behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)
      (( $behind )) && gitstatus+=( "${c4}-${behind}${c2}" )

      echo "${hook_com[branch]} [${remote} ${(j:/:)gitstatus}] | ${behind}"
      hook_com[branch]="${hook_com[branch]} [${remote} ${(j:/:)gitstatus}]"
  fi
}

# Show count of stashed changes
function +vi-git-stash() {
  local -a stashes

  if [[ -s ${hook_com[base]}/.git/refs/stash ]] ; then
    stashes=$(git stash list 2>/dev/null | wc -l)
    hook_com[misc]+=" (${stashes} stashed)"
  fi
}

autoload -U add-zsh-hook
autoload -Uz vcs_info
autoload +X VCS_INFO_nvcsformats

add-zsh-hook precmd vcs_info

# functions[VCS_INFO_nvcsformats]=${functions[VCS_INFO_nvcsformats]/local -a msgs/}
# zstyle ':vcs_info:*' check-for-changes true
# zstyle ':vcs_info:*' stagedstr '%{%F{green}%B%} ● %{%b%f%}'
# zstyle ':vcs_info:*' unstagedstr '%{%F{red}%B%} ● %{%b%f%}'
zstyle ':vcs_info:*' stagedstr '%{%F{green}%B%} staged%{%b%f%}'
zstyle ':vcs_info:*' unstagedstr '%{%F{red}%B%} unstaged%{%b%f%}'
# zstyle ':vcs_info:*' formats '%{%F{cyan}%}%45<…<%R%<</%{%f%}%{%F{green}%}(%25>…>%b%<<)%{%f%}%{%F{cyan}%}%S%{%f%}%c%u'
# zstyle ':vcs_info:*' actionformats '%{%F{cyan}%}%45<…<%R%<</%{%f%}%{%F{red}%}(%a|%m)%{%f%}%{%F{cyan}%}%S%{%f%}%c%u'
# zstyle ':vcs_info:*' nvcsformats '%{%F{cyan}%}%~%{%f%}'
# zstyle ':vcs_info:git:*' patch-format '%10>…>%p%<< (%n applied)'

zstyle ':vcs_info:*' enable git svn hg
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:git*:*' git-revision true
zstyle ':vcs_info:*' use-simple false

# zstyle ':vcs_info:svn*' formats "%{%F{cyan}%}%R/ %{%F{red}%}[%b] (%a) %m%u%c%{%f%} %S"
# zstyle ':vcs_info:svn*' actionformats "%{%F{cyan}%}%r/%{%F{red}%}(%b)%{%f%}%S"

# zstyle ':vcs_info:git*' formats "%{%F{cyan}%}%R/ %{%F{magenta}%}[%b] (%a) %m%u%c%{%f%} %S"
zstyle ':vcs_info:git*' formats "%R %{%F{magenta}%}[%s ±]%{%f%}%{%F{cyan}%}[%b]%{%f%}%m%u%c %S"
zstyle ':vcs_info:git*' actionformats "%R %{%F{magenta}%}[%s ±]%{%f%}%{%F{cyan}%}[%b|%a]%{%f%}%m%u%c %S"

zstyle ':vcs_info:svn*' formats "%R %{%F{mred}%}[%s ⚡]%{%f%}%{%F{cyan}%}[%b%{%f%}]%c %S"
zstyle ':vcs_info:svn*:*' branchformat "%b|%r"

zstyle ':vcs_info:hg*' formats "%R [%s ☿] [%b] %c"
# zstyle ':vcs_info:git*' actionformats "(%s|%a) %12.12i %c %u %b %m"

zstyle ':vcs_info:*' nvcsformats '%~'

zstyle ':vcs_info:*+set-message:*' hooks home-path
zstyle ':vcs_info:git+set-message:*' hooks home-path git-st git-stash
# zstyle ':vcs_info:git+post-backend:*' hooks git-remote-staged
# function +vi-git-remote-staged() {
  # Show "unstaged" when changes are not staged or not committed
  # Show "staged" when last committed is not pushed

  # See original VCS_INFO_get_data_git for implementation details
#
  # Set "unstaged" when git reports either staged or unstaged changes
  # if (( gitstaged || gitunstaged )) ; then
    # gitunstaged=1
  # fi
#
  # Set "staged" when current HEAD is not present in the remote branch
  # if (( querystaged )) && \
     # [[ "$(${vcs_comm[cmd]} rev-parse --is-inside-work-tree 2> /dev/null)" == 'true' ]] ; then
      # Default: off - these are potentially expensive on big repositories
      # if ${vcs_comm[cmd]} rev-parse --quiet --verify HEAD &> /dev/null ; then
          # gitstaged=1
          # if ${vcs_comm[cmd]} status --branch --short | head -n1 | grep -v ahead > /dev/null ; then
            # gitstaged=
          # fi
      # fi
  # fi
#
  # hook_com[staged]=$gitstaged
  # hook_com[unstaged]=$gitunstaged
# }

# zstyle ':vcs_info:git*' formats "%{$fg[grey]%}%s %{$reset_color%}%r/%S%{$fg[grey]%} %{$fg[blue]%}%b%{$reset_color%}%m%u%c%{$reset_color%} "
# zstyle ':vcs_info:git*' actionformats "%s  %r/%S %b %m%u%c "

# vim: set ft=zsh nowrap textwidth=0 :
